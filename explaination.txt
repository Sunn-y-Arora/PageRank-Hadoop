  

JOB 1
Job#1 mapper will simply parse a line of the input graph creating a map with key-value(s) pairs.
          Input format is the following (separator is TAB):
          
              <nodeA>    <nodeB>
          
          which denotes an edge going from <nodeA> to <nodeB>.
          We would need to skip comment lines (denoted by the # characters at the beginning of the line).
          We will also collect all the distinct nodes in our graph: this is needed to compute the initial 
          pagerank value in Job #1 reducer and also in later jobs

 
Job#1 reducer will scroll all the nodes pointed by the given "key" node, constructing a
      comma separated list of values and initializing the page rank for the "key" node.
      Output format is the following (separator is TAB):
        
              <title>    <page-rank>    <link1>,<link2>,<link3>,<link4>,...,<linkN>
              
          As for the pagerank initial value, early version of the PageRank algorithm used 1.0 as default, 
          however later versions of PageRank assume a probability distribution between 0 and 1, hence the 
          initial valus is set to DAMPING FACTOR  TOTAL NODES for each node in the graph.   
         






  PageRank calculation algorithm (mapper)
          Input file format (separator is TAB):
          
              <title>    <page-rank>    <link1>,<link2>,<link3>,<link4>,... ,<linkN>
          
          Output has 2 kind of records:
          One record composed by the collection of links of each page:
              
              <title>   |<link1>,<link2>,<link3>,<link4>, ... , <linkN>
              
          Another record composed by the linked page, the page rank of the source page 
          and the total amount of out links of the source page:
           
              <link>    <page-rank>    <total-links>
         




 PageRank calculation algorithm (reducer)
          Input file format has 2 kind of records (separator is TAB):
          
          One record composed by the collection of links of each page:
          
              <title>   |<link1>,<link2>,<link3>,<link4>, ... , <linkN>
              
          Another record composed by the linked page, the page rank of the source page 
          and the total amount of out links of the source page:
         
              <link>    <page-rank>    <total-links>
         




   Rank Ordering (mapper only)
          Input file format (separator is TAB):
          
              <title>    <page-rank>    <link1>,<link2>,<link3>,<link4>,... ,<linkN>
          
          This is a simple job which does the ordering of our documents according to the computed pagerank.
          We will map the pagerank (key) to its value (page) and Hadoop will do the sorting on keys for us.
          There is no need to implement a reducer: the mapping and sorting is enough for our purpose.
         
